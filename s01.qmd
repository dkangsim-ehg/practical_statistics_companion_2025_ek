# S01: Concepts of Measurement {#sec-s01}

Understanding the type of data you're working with is the foundation of all statistical analysis. In research, this knowledge determines which statistical methods are appropriate and how to interpret your results correctly.

## Essential R packages

Before diving into measurement concepts, let's introduce three key packages. 

**haven**: imports data from SPSS, SAS, and Stata files (e.g., read_sav(), read_dta(), etc)

**ggplot2**: grammar of graphics for creating visualizations

**gtsummary**: grammar of tables for creating statistical summaries (aka table1)

```{webr-r}
#| context: setup
#| echo: false

# Global setup - runs once when the site loads
# Packages are already loaded via _quarto.yml

# Set global options
options(
  digits = 3,
  scipen = 999,
  width = 80
)

# Create data (diet45ex.sav)
diet_data <- data.frame(
  ID = c(15, 16, 17, 18, 19),
  Sex = factor(c(0, 0, 0, 0, 0)),
  fdwt3 = c(1017, 988, 1864, 874, 1493),
  kcal3 = c(1855, 1340, 3086, 1196, 2313),
  prot3gm = c(57.2, 35.8, 93.5, 72.7, 131.5),
  fat3gm = c(64.5, 24.5, 84.5, 56.2, 59.4),
  cho3gm = c(271.8, 256.6, 512.3, 114.5, 314.2),
  ncal3gm = c(623.5, 671.1, 1173.7, 630.6, 987.9),
  pctfat3 = c(31.3, 16.5, 24.6, 42.3, 23.1),
  pctcho3 = c(59.6, 76.6, 66.4, 38.3, 54.3),
  pctpro3 = c(12.3, 10.7, 12.1, 24.3, 22.7),
  Exercise2 = factor(c(0, 0, 1, 0, 2)),
  Exercise_Sex = factor(c(1, 1, 2, 1, 3))
)
```

## Data Import Considerations for Reproducible Research

In practice, you would import your data from external files. Here's how you would typically handle different file formats:

```r
# Note: This code will not run in webR environment
library(haven)  # Import SAS, Stata, SPSS files
diet_data <- read_sav("https://raw.githubusercontent.com/dkangsim-ehg/practical_statistics_companion_2025_ek/main/Diet45Ex.sav") %>%
  zap_labels() %>%      # Remove SPSS labels
  zap_formats()         # Remove SPSS formatting

# For importing CSV files, you would use read_csv()
diet_data <- read_csv("file_directory/diet45ex.csv")
```

**Why **CSV** Files Are Preferred for Reproducibility:**

CSV (Comma-Separated Values) files are the gold standard for data sharing in research because they:

- **Universal compatibility**: Can be opened by any statistical software (R, SPSS, SAS, Python, Excel)
- **Plain text format**: Human-readable and won't become obsolete
- **No proprietary formatting**: Unlike .sav, .dta, or .xlsx files that may have software-specific features
- **Version control friendly**: Changes can be tracked easily in Git/GitHub
- **Lightweight**: Smaller file sizes compared to proprietary formats
- **No licensing dependencies**: Don't require specific software to access

For this course, all data has been manually entered in the background to ensure compatibility with the webR environment.


```{webr-r}
# Load packages first
#library(haven)
library(tidyverse)
# Quick look at the data structure
str(diet_data)

# Show first 8 rows
print(head(diet_data, 8))
```

## The Pipe Operator (%>%): Making Code Readable

The pipe operator `%>%` is essential for readable data analysis. It passes the result of one function to the next, like an assembly line:

```{webr-r}
# Compare calories across exercise groups using pipes
exercise_summary <- diet_labeled %>%
  group_by(exercise_label) %>%
  summarise(
    n = n(),
    mean_kcal = round(mean(kcal3, na.rm = TRUE), 0),
    sd_kcal = round(sd(kcal3, na.rm = TRUE), 0),
    .groups = "drop"
  )

print(exercise_summary)
```

**Clinical Insight**: The pipe `%>%` makes code read like instructions: "Take the data (diet_data), _THEN_ group by exercise (Exercise2), THEN calculate mean calories (kcal3)."

## Exercise: Data labels for categorical variables

```{webr-r}
# Create meaningful labels for categorical variables
diet_labeled <- diet_data %>%
  mutate(
    sex_label = factor(Sex, levels = c(0, 1), labels = c("Male", "Female")),
    exercise_label = factor(Exercise2, 
                           levels = c(0, 1, 2), 
                           labels = c("Control", "Aerobic", "Resistance"))
  )

# Check the labeled variables
table(diet_labeled$sex_label)
table(diet_labeled$exercise_label)
```

## Descriptive Analysis with ggplot2

### Distribution of Exercise Groups (Nominal Variable)

```{webr-r}
# Visualize exercise group distribution
exercise_plot <- diet_labeled %>%
  count(exercise_label) %>%
  ggplot(aes(x = exercise_label, y = n, fill = exercise_label)) +
  geom_col(alpha = 0.8, color = "white", linewidth = 0.5) +
  geom_text(aes(label = n), vjust = -0.5, size = 4, fontface = "bold") +
  labs(
    title = "Distribution of Exercise Interventions",
    subtitle = "Sample sizes across treatment groups",
    x = "Exercise Group", 
    y = "Number of Participants"
  ) +
  scale_fill_viridis_d(name = "Group") +
  theme_minimal() +
  theme(legend.position = "none")

print(exercise_plot)
```

**Clinical Insight**: Bar charts are appropriate for nominal (categorical) data. Each bar represents a distinct category with no inherent order.

### Caloric Intake Distribution (Continuous Variable)

```{webr-r}
# Examine distribution of caloric intake
calorie_plot <- diet_labeled %>%
  ggplot(aes(x = kcal3)) +
  geom_histogram(bins = 8, fill = "steelblue", alpha = 0.8, color = "white") +
  geom_vline(aes(xintercept = mean(kcal3, na.rm = TRUE)), 
             color = "red", linetype = "dashed", linewidth = 1.2) +
  labs(
    title = "Distribution of Daily Caloric Intake",
    subtitle = "Red line shows mean intake",
    x = "Kilocalories per Day", 
    y = "Number of Participants"
  ) +
  theme_minimal()

print(calorie_plot)

# Calculate mean for reference
mean_calories <- round(mean(diet_labeled$kcal3, na.rm = TRUE), 0)
paste("Mean caloric intake:", mean_calories, "kcal/day")
```

**Clinical Insight**: Histograms show the distribution shape of continuous (ratio) data. The mean (red line) summarizes central tendency for ratio variables.

### Descriptive statistics table

```{webr-r}
# Create comprehensive summary table by exercise group
summary_table <- diet_labeled %>%
  select(exercise_label, sex_label, kcal3, prot3gm, fat3gm, cho3gm) %>%
  tbl_summary(
    by = exercise_label,
    statistic = list(
      all_continuous() ~ "{mean} ({sd})",
      all_categorical() ~ "{n} ({p}%)"
    ),
    digits = all_continuous() ~ 1,
    label = list(
      sex_label ~ "Sex",
      kcal3 ~ "Kilocalories/day",
      prot3gm ~ "Protein (g/day)",
      fat3gm ~ "Fat (g/day)", 
      cho3gm ~ "Carbohydrates (g/day)"
    )
  ) %>%
  add_overall() %>%
  modify_header(label ~ "**Characteristic**") %>%
  modify_spanning_header(c("stat_1", "stat_2", "stat_3") ~ "**Exercise Group**")

print(summary_table)
```

**Clinical Insight**: This table format is standard for medical journals' "Table 1" showing baseline characteristics by treatment group.

## Key Takeaways

::: {.callout-tip}
## Remember These Points

1. **Variable classification determines statistical methods**: 
   - Nominal: counts, percentages (bar charts)
   - Ordinal: medians, percentiles (bar charts, box plots)
   - Interval/Ratio: means, standard deviations (histograms, scatterplots)

2. **Essential R packages for medical research**:
   - `haven`: import SPSS/SAS/Stata files
   - `ggplot2`: create publication-quality figures
   - `gtsummary`: generate professional statistical tables

3. **The pipe operator (%>%) improves code readability**: "Take data, then group, then summarize"

4. **Professional presentation matters**: Use proper labels, appropriate statistics, and clear visualizations
:::


## Next Steps

In [S02: Power Analysis and Sample Size](s02.qmd), we'll learn how to:
- Calculate statistical power for study planning
- Determine appropriate sample sizes for different study designs
